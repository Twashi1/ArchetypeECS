#pragma once

#include "constants.h"
#include "paged_array.h"

#include <vector>
#include <utility>
#include <type_traits>

namespace Vivium {
	namespace ECS {
		template <typename T>
		concept integer_type = std::is_integral_v<T>;

		template <integer_type T, uint32_t max_ids, T null_value>
		struct id_generator {
			// Inside, an implicit list pointing to IDs to recycle
			std::vector<T> created;
			uint32_t available;
			T next = null_value; // Next value to recycle
			T new_counter;

			id_generator() : new_counter(0), available(0) {}

			// Returns if the next ID generated will be a recycled ID
			bool will_next_be_recycled() {
				return available > 0;
			}

			// Make all IDs in use available again, loses information
			// on recycling
			void free_all() {
				new_counter = 0;
				available = 0;

				created.clear();
				next = null_value;
			}

			// Will return null value when it runs out of IDs
			[[nodiscard]] T get() {
				if (available > 0) {
					T to_recycle = next;

					std::swap(created[next], next);
					--available;

					return to_recycle;
				}

				if (new_counter == max_ids - 1)
					return null_value;

				created.push_back(new_counter);
				return new_counter++;
			}

			// Undefined if given ID that was not generated by ID generator
			void free(T id) {
				++available;
				std::swap(created[id], next);
			}
		};
	}
}